// <auto-generated />
using System;
using App.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250627142246_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.AssessmentResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AccuracyScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("AssessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<float>("FluencyScore")
                        .HasColumnType("real");

                    b.Property<float>("CompletenessScore")
                        .HasColumnType("real");

                    b.Property<string>("FullResultJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<float>("PronunciationScore")
                        .HasColumnType("real");

                    b.Property<float>("ProsodyScore")
                        .HasColumnType("real");

                    b.Property<Guid>("TextPassageId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAudioUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TextPassageId");

                    b.HasIndex("UserId");

                    b.ToTable("ASSESSMENT_RESULTS", (string)null);
                });

            modelBuilder.Entity("App.Domain.PhonemeScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AccuracyScore")
                        .HasColumnType("real");

                    b.Property<string>("Phoneme")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("WordScoreId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WordScoreId");

                    b.ToTable("PHONEME_SCORES", (string)null);
                });

            modelBuilder.Entity("App.Domain.TextPassage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NativeSpeakerAudioUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("TEXT_PASSAGES", (string)null);
                });

            modelBuilder.Entity("App.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("App.Domain.WordScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AccuracyScore")
                        .HasColumnType("real");

                    b.Property<Guid>("AssessmentResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Offset")
                        .HasColumnType("integer");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentResultId");

                    b.ToTable("WORD_SCORES", (string)null);
                });

            modelBuilder.Entity("App.Domain.AssessmentResult", b =>
                {
                    b.HasOne("App.Domain.TextPassage", "TextPassage")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("TextPassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.User", "User")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextPassage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.PhonemeScore", b =>
                {
                    b.HasOne("App.Domain.WordScore", "WordScore")
                        .WithMany("PhonemeScores")
                        .HasForeignKey("WordScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WordScore");
                });

            modelBuilder.Entity("App.Domain.WordScore", b =>
                {
                    b.HasOne("App.Domain.AssessmentResult", "AssessmentResult")
                        .WithMany("WordScores")
                        .HasForeignKey("AssessmentResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentResult");
                });

            modelBuilder.Entity("App.Domain.AssessmentResult", b =>
                {
                    b.Navigation("WordScores");
                });

            modelBuilder.Entity("App.Domain.TextPassage", b =>
                {
                    b.Navigation("AssessmentResults");
                });

            modelBuilder.Entity("App.Domain.User", b =>
                {
                    b.Navigation("AssessmentResults");
                });

            modelBuilder.Entity("App.Domain.WordScore", b =>
                {
                    b.Navigation("PhonemeScores");
                });
#pragma warning restore 612, 618
        }
    }
}
